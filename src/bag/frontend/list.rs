use async_trait::async_trait;
use leptos::*;
use leptos_router::*;
use leptos_struct_table::*;
use serde::{Deserialize, Serialize};
use serde_qs as qs;
use std::cmp::min;

use crate::bag::api::*;
use crate::bag::model::*;

#[derive(Clone, Copy)]
pub struct RoadiebagClassesPreset;

impl TableClassesProvider for RoadiebagClassesPreset {
    fn new() -> Self {
        Self
    }

    fn table(&self, classes: &str) -> String {
        format!(
            "{} {}",
            "w-full whitespace-no-wrap table-pin-cols table-zebra table-auto", classes
        )
    }

    fn head_row(&self, template_classes: &str) -> String {
        format!("{} {}", "", template_classes)
    }

    fn head_cell(&self, sort: ColumnSort, template_classes: &str) -> String {
        let sort_class = match sort {
            ColumnSort::None => "",
            _ => "text-black dark:text-white",
        };

        format!(
            "cursor-pointer px-5 py-2 {} {}",
            sort_class, template_classes
        )
    }

    fn head_cell_inner(&self) -> String {
        "flex items-center after:content-[--sort-icon] after:pl-1 after:opacity-40 before:content-[--sort-priority] before:order-last before:pl-0.5 before:font-light before:opacity-40".to_string()
    }

    fn row(&self, _row_index: usize, selected: bool, template_classes: &str) -> String {
        let bg_color = if selected { "bg-base-200" } else { "" };

        format!("{} {} {}", "", bg_color, template_classes)
    }

    fn cell(&self, template_classes: &str) -> String {
        format!("{} {}", "px-5 py-2", template_classes)
    }
}

#[allow(unused_variables)]
#[component]
pub fn EditDeleteRowValueRenderer<K, F>(
    /// The class attribute for the row element. Generated by the classes provider.
    #[prop(into)]
    class: MaybeSignal<String>,
    /// The index of the row. Starts at 0 for the first body row. The header row always has index 0 as well.
    #[prop(into)]
    key: K,
    /// The index of the row. Starts at 0 for the first body row.
    index: usize,
    /// The selected state of the row. True, when the row is selected.
    #[prop(into)]
    selected: Signal<bool>,
    /// The event handler for the click event. Has to be called with [`TableRowEvent`].
    on_click: F,
    /// The raw value for this row. Useful for building columns that require multiple fields
    #[prop(optional)]
    row_value: Signal<ListItem>,
    children: Children,
) -> impl IntoView
where
    F: Fn(TableRowEvent<K>) + 'static,
    K: Clone + 'static,
{
    let delete_action = create_server_action::<DeleteBagItem>();
    let (enable_delete, set_enable_delete) = create_signal(false);

    let id_signal = Signal::derive(move || row_value().id);

    view! {
        <tr
            class=class
            on:click=move |mouse_event| on_click(TableRowEvent {
                key: key.clone(),
                index,
                mouse_event,
            })
        >

            {children()}
            <td>
                <div class="inline-flex item-baseline self-center">
                    <A href=move || format!("/items/edit/{}", row_value().id)>
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            class="w-6 h-6"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"
                            ></path>
                        </svg>
                    </A>
                </div>
            </td>
            <td>
                <div class="flex inline-flex item-baseline self-center">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="1.5"
                        stroke="currentColor"
                        class="w-6 h-6"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                        ></path>
                    </svg>
                    <input
                        type="checkbox"
                        prop:value=enable_delete
                        class="toggle toggle-xs mt-1.5"
                        attr:checked=enable_delete
                        on:change=move |ev| {
                            set_enable_delete(event_target_checked(&ev));
                        }
                    />

                    <Show when=enable_delete>
                        <ActionForm action=delete_action>
                            <input type="hidden" prop:value=id_signal/>
                            <button type="submit" class="btn btn-xs btn-error mx-1">
                                "Delete"
                            </button>
                        </ActionForm>
                    </Show>
                </div>

            </td>
        </tr>
    }
}

#[derive(TableComponent, Serialize, Deserialize, Debug, Default, Clone, PartialEq)]
#[table(
    sortable,
    classes_provider = "RoadiebagClassesPreset",
    row_renderer = "EditDeleteRowValueRenderer"
)]
pub struct ListItem {
    #[table(key, skip)]
    pub id: i64,
    pub name: String,
    pub description: String,
    pub quantity: i32,
    pub size: String,
    pub infinite: bool,
    pub added_by: String,
}

impl From<BagItem> for ListItem {
    fn from(value: BagItem) -> Self {
        ListItem {
            id: value.id,
            added_by: value.added_by.username,
            name: value.name,
            description: value.description,
            quantity: value.quantity,
            size: value.size.to_string(),
            infinite: value.infinite,
        }
    }
}

#[component]
pub fn ItemListPagination(
    current_page: Resource<BagItemFilter, Option<BagItemPage>>,
) -> impl IntoView {
    let page_max = Signal::derive(move || {
        let page = use_context::<Resource<BagItemFilter, Option<BagItemPage>>>()
            .expect("Unable to fetch page");

        let page_num = if let Some(Some(pn)) = page() {
            pn.page_num
        } else {
            1
        };

        let total_pages = if let Some(Some(page)) = current_page() {
            page.total_pages
        } else {
            1
        };

        min(page_num + 2, total_pages)
    });

    let pages = Signal::derive(move || {
        let query = use_context::<Memo<BagItemFilter>>().expect("Unable to fetch query");
        let page = use_context::<Resource<BagItemFilter, Option<BagItemPage>>>()
            .expect("Unable to fetch page");

        let page_num = if let Some(Some(pn)) = page() {
            pn.page_num
        } else {
            1
        };

        let page_min = page_num.checked_sub(2).unwrap_or(page_num);

        let total_pages = if let Some(Some(page)) = current_page() {
            page.total_pages
        } else {
            1
        };

        let page_max = min(page_num + 2, total_pages);

        let mut pages = vec![];
        for i in page_min..=page_max {
            let new_qs =
                qs::to_string(&query().with_page(i)).expect("Couldn't serialize query string");
            let class = if page_num == i {
                "join-item btn btn-disable"
            } else {
                "join-item btn"
            };
            pages.push((i, format!("/list?{}", new_qs), class));
        }
        pages
    });

    view! {
        <div class="pt-4 w-full flex justify-center">
            <div class="join">

                <a class="join-item btn" exact=true href="/list?page_num=1">
                    "«"
                </a>
                <For
                    each=pages
                    key=|link| link.0
                    children=move |(id, query, class)| {
                        view! {
                            <a class=class href=query>
                                {id}
                            </a>
                        }
                    }
                />

                <a
                    class="join-item btn"
                    exact=true
                    href=move || { format!("/list?page_num={}", page_max()) }
                >
                    "»"
                </a>
            </div>
        </div>
    }
}

#[component]
pub fn ItemList() -> impl IntoView {
    logging::log!("Item list time");
    let location = use_location();
    let query = create_memo(move |_| {
        location.search.with(|m| {
            let qs_config = qs::Config::new(0, false);
            let bif = qs_config
                .deserialize_str::<BagItemFilter>(m)
                .unwrap_or(BagItemFilter {
                    page_num: Some(1),
                    page_size: Some(50),
                    ..Default::default()
                });
            logging::log!("Query string is {} bif is {:?}", m, bif);
            bif
        })
    });
    provide_context(query);
    //let query = use_query::<BagItemFilter>();
    let page = create_resource(query, |filter| async move {
        match list_bag_items(Some(filter)).await {
            Ok(Ok(page)) => Some(page),
            _ => None,
        }
    });
    provide_context(page);

    let page_items = create_rw_signal(Vec::<ListItem>::new());

    create_effect(move |_| {
        if let Some(Some(pg)) = page() {
            let mut item_vec = Vec::<ListItem>::new();
            for bi in pg.items.into_iter() {
                item_vec.push(bi.into());
            }
            page_items.set(item_vec);
        }
    });

    view! {
        <div class="mt-0 mr-8 mb-0 ml-0 w-full h-full flex flex-col bg-base-100 shadow-xl">
            <div class="h-full w-full pb-6 bg-base-100">
                <div class="overflow-x-auto">
                    <ListItemTable items=page_items/>
                </div>
                <ItemListPagination current_page=page/>
            </div>
        </div>
    }
}
